import httpimport osimport requestsimport uvicornfrom bs4 import BeautifulSoupfrom fastapi import FastAPIfrom fastapi import HTTPExceptionfrom pydantic import BaseModelsession = requests.session()def get_first_paragraph(html_doc: str):    """    Метод для получения содержимого из первого тега <p>    :param html_doc:    :return:    """    soup = BeautifulSoup(html_doc, 'html.parser')    tags = soup.find_all('p')    result = None    if len(tags):        result = tags[0].text    return resultclass Database:    """    База данных для работы с файлами    """    def __init__(self):        self.directory = 'wiki_files'    def save(self, filename, text):        """        Создает файл в папке self.directory        с названием filename и соддержимым text        :param filename:        :param text:        :return:        """        with open(f'{self.directory}/{filename}', 'w') as f:            f.write(text)    def get(self, filename):        """        Считывает текст из файла с именем filename в        папке self.directory        :param filename:        :return:        """        if filename not in os.listdir(self.directory):            return None        with open(f'{self.directory}/{filename}', 'r') as f:            result = f.read()        return resultclass ParagraphScrapper:    def __init__(self):        self.url = 'https://ru.wikipedia.org/wiki'    def get_paragraph(self, title: str):        """        Получение первого абзаца по адресу self.url/title        :param title:        :return:        """        response = session.get(f'{self.url}/{title}')        if response.status_code == http.HTTPStatus.NOT_FOUND:            return None        result = get_first_paragraph(response.text)        return resultapp = FastAPI()database = Database()paragraph_scr = ParagraphScrapper()class WikiName(BaseModel):    name: strclass WikiOut(BaseModel):    name: str    description: str@app.get('/wiki/{name}', response_model=WikiOut)def get_wiki(name: str):    """    Эндпоинт для получения первого абзаца по имени    :param name:    :return:    """    description = database.get(name)    if description is None:        raise HTTPException(            status_code=http.HTTPStatus.NOT_FOUND,            detail=f'File {name} not found'        )    return WikiOut(        name=name, description=description    )@app.post("/wiki")def post_wiki(wiki_name: WikiName):    """    Эндпоинт для определения в википедии и сохранения результата в базу    :param wiki_name:    :return:    """    result = paragraph_scr.get_paragraph(wiki_name.name)    if result is None:        raise HTTPException(            status_code=http.HTTPStatus.NOT_FOUND,            detail=f'Page {wiki_name.name} not found'        )    database.save(wiki_name.name, result)uvicorn.run(app, port=6060, host='0.0.0.0')